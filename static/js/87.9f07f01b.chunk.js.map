{"version":3,"file":"static/js/87.9f07f01b.chunk.js","mappings":"+MASA,MAJA,SAAeA,GACb,OAAO,SAACC,EAAA,GAAD,kBAAcD,GAAd,oBAAsBA,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAOE,a,UCGtC,MAJA,SAAkBF,GAChB,OAAO,SAACG,EAAA,GAAD,kBAAiBH,GAAjB,oBAAyBA,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAOE,aCGnCE,EAAe,SAACJ,GACpB,IAAQK,EAAiCL,EAAjCK,QAASC,EAAwBN,EAAxBM,KAAMC,EAAkBP,EAAlBO,KAAMC,EAAYR,EAAZQ,QAE7B,GAAwBC,EAAAA,EAAAA,WAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,EAAAA,EAAAA,YAAU,WACRD,EAAQN,KACP,CAACA,KAGF,SAAC,EAAD,CAAUK,KAAMA,EAAMG,iBAAkB,IAAML,QAASA,EAAvD,UACE,SAAC,EAAD,CACEM,QAAQ,SACRN,QAASA,EACTO,SAAUR,EACVS,GAAI,CAAEC,MAAO,QAJf,SAMGX,OAkBT,SAASY,EAAcC,EAAUC,GAC/B,OACED,EAASd,UAAYe,EAASf,SAC9Bc,EAASb,OAASc,EAASd,MAC3Ba,EAASZ,OAASa,EAASb,MAC3BY,EAASX,UAAYY,EAASZ,QAIlC,OAdyBa,EAAAA,EAAAA,OACvB,SAACrB,GAAD,OAAW,SAACI,GAAD,UAAkBJ,MAC7BkB","sources":["components/MUI/Alert.jsx","components/MUI/Snackbar.jsx","components/Notification/Notification.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\n// @mui/material\r\nimport { Alert as AlertMUI } from \"@mui/material\";\r\n\r\nfunction Alert(props) {\r\n  return <AlertMUI {...props}>{props?.children}</AlertMUI>;\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\n\r\n// @mui/material\r\nimport { Snackbar as SnackbarMUI } from \"@mui/material\";\r\n\r\nfunction Snackbar(props) {\r\n  return <SnackbarMUI {...props}>{props?.children}</SnackbarMUI>;\r\n}\r\n\r\nexport default Snackbar;\r\n","import React, { memo, useEffect, useState } from \"react\";\r\n\r\n// prop types\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui\r\nimport Alert from \"../MUI/Alert\";\r\nimport Snackbar from \"../MUI/Snackbar\";\r\n\r\nconst Notification = (props) => {\r\n  const { visible, text, type, onClose } = props;\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setOpen(visible);\r\n  }, [visible]);\r\n\r\n  return (\r\n    <Snackbar open={open} autoHideDuration={6000} onClose={onClose}>\r\n      <Alert\r\n        variant=\"filled\"\r\n        onClose={onClose}\r\n        severity={type}\r\n        sx={{ width: \"100%\" }}\r\n      >\r\n        {text}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nNotification.propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired, // error warning info success\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nconst NotificationMemo = memo(\r\n  (props) => <Notification {...props} />,\r\n  arePropsEqual\r\n);\r\n\r\nfunction arePropsEqual(oldProps, newProps) {\r\n  return (\r\n    oldProps.visible === newProps.visible &&\r\n    oldProps.text === newProps.text &&\r\n    oldProps.type === newProps.type &&\r\n    oldProps.onClose === newProps.onClose\r\n  );\r\n}\r\n\r\nexport default NotificationMemo;\r\n"],"names":["props","Alert","children","Snackbar","Notification","visible","text","type","onClose","useState","open","setOpen","useEffect","autoHideDuration","variant","severity","sx","width","arePropsEqual","oldProps","newProps","memo"],"sourceRoot":""}